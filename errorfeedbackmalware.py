import os
import platform
import openai
import subprocess
from dotenv import load_dotenv
load_dotenv()


def install_libraries(library_string):
    libraries = library_string.split(",")
    all = True
    for library in libraries:
        try:
            subprocess.check_call(['pip', 'install', library])
            print(f'Successfully installed {library}')
        except subprocess.CalledProcessError as e:
            all = False
            print(f'Error installing {library}: {e}')

    if(all):
        print("Libraries downloaded successfully")


def run(filename, content):
    with open(filename, 'w') as f:
        f.write(content)

    with open(filename) as f:
        first_line = f.readline().strip()
        print("fL:", first_line)

    install_libraries(first_line)
    
    subprocess.run(["python", filename])

    try:
        result = subprocess.run(["python", filename], capture_output=True, text=True, check=True)
        print("Success!cript output:", result.stdout)
    except subprocess.CalledProcessError as e:
        print("Error running script:", e)
        print("Script output (stderr):", e.stderr)

        error_messages =  [ {"role": "system", "content": "Please respond to the best of your ability. If my prompt begins with 'Mode: Code' you should ONLY print out code and nothing else. For instance, if my prompt asked 'Mode:Code How do I print out hello in Python?' You should only respond with 'print(Hello World)' and nothing else. "}]

        m1 = "Mode: Code. REMINDER THAT MODE CODE MEANS NOTHING EXCEPT CODE, the response you give will be run in an IDE. DO NOT PUT ANYTHING THAT WILL MESS UP THE PROGRAM, such as ''' python. Here is my script code" + str(reply) + "I will now provide the error from the code. Please reply with revised code (remember ONLY code, NO commentary) that will debug the error. Here is the error I got, " + str(e)
        print("M1: ", m1)
        error_messages.append({"role": "user", "content": m1})

        chat2 = client.chat.completions.create(
                    model="gpt-3.5-turbo", messages=error_messages
        )

        reply2 = chat2.choices[0].message.content
        run(filename, reply2)

    
client = openai.OpenAI(
        api_key = os.getenv('OPENAI_API_KEY'),
)

messages = [ {"role": "system", "content": "Please respond to the best of your ability. If my prompt begins with 'Mode: Code' you should ONLY print out code and nothing else. For instance, if my prompt asked 'Mode:Code How do I print out hello in Python?' You should only respond with 'print(Hello World)' and nothing else. "}]

message1 = "Mode: Code. REMINDER THAT MODE CODE MEANS NOTHING EXCEPT CODE, the response you give will be run in an IDE. DO NOT PUT ANYTHING THAT WILL MESS UP THE PROGRAM, such as ''' python. Assume no libraries are downloaded except OS. Create a program that searches for a file called bob.txt in the current directory and encrypt it with AES encryption. If you create a new encrypted file, remember to delete the old one. Store the AES key in a separate txt file named keys.txt. Before the import statements such as 'import os', have a comment that's ONLY content are the names of the Python libraries, needed for the script in one line. The format for this would be - first line: '# cryptography, warnings'. second part: -the actual code for the rest of the script. I will go mad if you put this in a comment again."

messages.append({"role": "user", "content": message1})


chat = client.chat.completions.create(
            model="gpt-3.5-turbo", messages=messages
)


reply = chat.choices[0].message.content
fi = "payload.py"
run(fi, reply)